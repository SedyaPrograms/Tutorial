# -*- coding: utf-8 -*-
"""
Created on Wed Apr 21 09:29:55 2021

@author: Sedov Kirill
"""
import time
import math

def Valter(x):
    i = 4
    k1 = 2.19547
    cicle = 0
    k3 = 1
    while i <= x:
        if i != 5:
            k2 = math.log(2*cicle + 1)
            k3 = k3 + k2
        cicle += 0.1
        c = k3 * (i ** (k1 * math.sqrt( math.log(i) * math.log(math.log(i)))))
        k1 = k1 - 0.22 * math.exp(-(i-4)*1.172)
        i += 1
    return math.floor(c) 

"""
Функция prost(N) раскладывает число на составные простые
На вход: число N - целое
На выход: Лист из двух листов ARR - простые числа, на которые раскладывается число; Step - степени этих чисел соответсвенно   
"""
def prost(N):
    ARR = []
    Step = []
    q = N
    n = 1
    while n <= N:   # Первичная проверка на целочисленное деление(т.е. находим делители числа)
        if N % n == 0:             
            check = 0 # в переменную check я буду записывать кол-во делителей данного делителя(т.е. числа n) 
            g = 1
            while g <= n: # Находим кл-во делителей делителя n(да тавтология, но если у делителя n всего 2 делителя( check = 2 ) - он простой, т.е нужный нам)   
                if n % g == 0:
                    check += 1
                g += 1    
            if check == 2:
                ARR.append(n)
                s = 0
                while q % n == 0 : # Находим степени наших делителей n 
                    s += 1 
                    q /= n               
                Step.append(s)     
        n += 1       
    return [ARR,Step] 

"""
Функция KarMaykle(N) - проверяет псевдопростые числа на причастность к числам Кармайкла
Основана на Теореме Корсельта(описана в комментариях)
На вход: Число N - целое
На выход: Ответ True - если число Кармайкла, False - если это не число Кармайкла
"""
def KarMaykle(N):
    Arr = prost(N) 
    if len(Arr[0]) < 3:                  # У Кармайкла чисел должно быть не менее 3 нетривиальных делителей
        return False
    for i in range(len(Arr[1])): 
        if Arr[1][i] > 1:                # Делители не являются полными квадратами(смотрим степени простых делителей нашего числа, разумеется, если степень делителя >1, то это уже квадрат)
            return False
        if (N-1) % (Arr[0][i] - 1) != 0: # Число N-1 целочисленно делится на (все) простые делители n числа N минус 1, т.е.: (N-1)/(n-1) 
            return False
    return True

start = time.time() 
"""
Скрипт ищет числа Кармайкла от 1 до указанного значения в цикле(разумеется для i можно 1 заменить на 561 - первое число Кармайкла, но это сильно погоды не делает)  
"""
def Sourse(N):
    Brr = []
    N = N - 1
    global i
    i = 1
    V = len(str(N))
    V = Valter(V)
    while i < N:
        if pow(2, i-1, i) == 1:    # Ищет псевдопростые числа, из которых мы найдем числа Кармайкла
            if KarMaykle(i):  # Проверяем число на причастность к числам Кармайкла
               Brr.append(i)
            if len(Brr) == V:
                return Brr        
        i += 2                 # Цикл "шагает по 2, потому что числа Кармайкла - нечетные
    return Brr

print(Sourse(100000))

end = time.time()
print('Time =', end - start)

"""
Среднее время выполнения программы для 10^5 чисел на моем ПК 115 секунд, результат не лучший, поэтому на досуге поющу возможности ускорения  
"""        
    


